;;-*-Lisp-*-
(in-package goal)
(bundles "SUN.DGO")
(require "engine/common-obs/baseplat.gc")
(declare-type wedge-plat-outer process)

(declare-type wedge-plat-master process)

(declare-type wedge-plat process)

;; DECOMP BEGINS

(deftype wedge-plat-master (process)
  ((center       vector :inline)
   (rotspeed     float)
   (rotate-inner float)
   (rotate-outer float)
   (should-tip? symbol))
  (:states
   wedge-plat-master-idle))

(defstate wedge-plat-master-idle (wedge-plat-master)
  :code (behavior ()
      (loop
        ;mod: Wedge platforms rotate the other way :3
        (set! (-> self rotate-inner)
              (the float (sar (shl (the int (- (-> self rotate-inner) (* (-> self rotspeed) (seconds-per-frame)))) 48) 48)))
        (set! (-> self rotate-outer)
              (the float (sar (shl (the int (+ (-> self rotate-outer) (* (-> self rotspeed) (seconds-per-frame)))) 48) 48)))
        ;mod: Wedge platforms tip when approached, fine tuned to be as rude as possible
        (set! (-> self should-tip?) (< (vector-vector-xz-distance (-> self center) (target-pos 0)) (meters 34.0)))
        (suspend))))

(defmethod init-from-entity! ((this wedge-plat-master) (arg0 entity-actor))
  (logior! (-> this mask) (process-mask platform))
  (set! (-> this center quad) (-> arg0 extra trans quad))
  (+! (-> this center y) 819.2)
  (set! (-> this rotspeed) (res-lump-float arg0 'rotspeed))
  (set! (-> this rotate-inner) 0.0)
  (set! (-> this rotate-outer) 0.0)
  (logclear! (-> this mask) (process-mask actor-pause))
  (go wedge-plat-master-idle)
  (none))

(deftype wedge-plat (baseplat)
  (
    (master   wedge-plat-master)
    (distance float)
    (offset   float)
  )
  (:methods
    (wedge-plat-method-27 (_type_ symbol) symbol)
  )
  (:states
    wedge-plat-idle
    wedge-plat-tip
  )
)

(defskelgroup *wedge-plat-sg*
  wedge-plat
  wedge-plat-lod0-jg
  wedge-plat-idle-ja
  ((wedge-plat-lod0-mg (meters 999999)))
  :bounds (static-spherem 0 0 0 6))

(defmethod wedge-plat-method-27 ((this wedge-plat) (is-outer? symbol))
  (let* (
        (master (-> this master))
        (sibling (if master (-> (the-as process-drawable (-> master ppointer)) brother)))
      )
    (when sibling
      (let* (
            (center-pos (the-as vector (&-> sibling 27))) ; technically wrong? maybe? but shhhh
            (dist (-> this distance))
            (progress (the float (sar (shl (the int (+ (the-as float (-> sibling (if is-outer? 33 32))) (-> this offset))) 48) 48)))
            (sin-p (sin progress))
            (cos-p (cos progress))
            (sin-pp (sin (+ (* 3.0 progress) (-> this offset))))
            (cos-pp (cos (+ (* 3.0 progress) (-> this offset))))
            (y-offset (meters (* 1.0 (- (if is-outer? cos-pp sin-pp) 0.5))))
            (can-flip? #f)
          )
        (quaternion-axis-angle! (-> this root quat) 0.0 1.0 0.0 (the float (sar (shl (the int (- 49152.0 progress)) 48) 48)))
        (set! (-> this basetrans x) (+ (-> center-pos x) (* dist cos-p)))
        (set! (-> this basetrans y) (+ (-> center-pos y) y-offset))
        (set! (-> this basetrans z) (+ (-> center-pos z) (* dist sin-p)))
        (if (or (< 0.95 cos-p) (< cos-p -0.95)) (set! can-flip? #t))
        can-flip?
      )
    )
  )
)

(defstate wedge-plat-idle (wedge-plat)
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
      (case message
        (('bonk) (baseplat-method-22 self))))
  :trans plat-trans
  :code (behavior ()
      (ja :num-func num-func-identity :frame-num (ja-aframe 0.0 0))
      (loop
        (wedge-plat-method-27 self #f)
        ;mod: Wedge platformers tip over when player gets close
        (when (-> (the-as wedge-plat-master (process-by-ename "wedge-plat-master-1")) should-tip?)
          (go wedge-plat-tip)
        )
        (suspend)))
  :post plat-post)

(defstate wedge-plat-tip (wedge-plat)
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
      (case message
        (('bonk) (baseplat-method-22 self))
        (('touch) (send-event proc 'no-look-around (seconds 1.5)) #f)))
  :trans plat-trans
  :code (behavior ()
      (ja-no-eval :group! wedge-plat-tip-ja :num! (seek! (ja-aframe 60.0 0)) :frame-num (ja-aframe 0.0 0))
      (until (ja-done? 0)
        (wedge-plat-method-27 self #f)
        (suspend)
        (ja :num! (seek! (ja-aframe 60.0 0) 100.0))) ;mod: Wedge platformers tip over instantly
      (ja-no-eval :group! wedge-plat-tip-ja :num! (seek! (ja-aframe 100.0 0)) :frame-num (ja-aframe 60.0 0))
      (until (ja-done? 0)
        (wedge-plat-method-27 self #f)
        (suspend)
        (ja :num! (seek! (ja-aframe 100.0 0))))
      ;mod: Wedge platformers stay tipped over
      (while (-> (the-as wedge-plat-master (process-by-ename "wedge-plat-master-1")) should-tip?)
        (ja :num-func num-func-identity :frame-num (ja-aframe 100.0 0))
        (wedge-plat-method-27 self #f)
        (suspend))
      (ja-no-eval :group! wedge-plat-tip-ja :num! (seek! (ja-aframe 153.0 0)) :frame-num (ja-aframe 100.0 0))
      (until (ja-done? 0)
        (wedge-plat-method-27 self #f)
        (suspend)
        (ja :num! (seek! (ja-aframe 153.0 0))))
      (go wedge-plat-idle))
  :post plat-post)

(defmethod init-from-entity! ((this wedge-plat) (arg0 entity-actor))
  (logior! (-> this mask) (process-mask platform))
  (let ((s4-0 (new 'process 'collide-shape-moving this (collide-list-enum hit-by-player))))
    (set! (-> s4-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s4-0 reaction) default-collision-reaction)
    (set! (-> s4-0 no-reaction) (the-as (function collide-shape-moving collide-shape-intersect vector vector none) nothing))
    (alloc-riders s4-0 1)
    (let ((s3-0 (new 'process 'collide-shape-prim-mesh s4-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> s3-0 prim-core collide-as) (collide-kind ground-object))
      (set! (-> s3-0 collide-with) (collide-kind target))
      (set! (-> s3-0 prim-core action) (collide-action solid rider-plat-sticky))
      (set! (-> s3-0 prim-core offense) (collide-offense indestructible))
      (set! (-> s3-0 transform-index) 3)
      (set-vector! (-> s3-0 local-sphere) 0.0 0.0 0.0 24576.0)
      (set-root-prim! s4-0 s3-0))
    (set! (-> s4-0 nav-radius) (* 0.75 (-> s4-0 root-prim local-sphere w)))
    (backup-collide-with-as s4-0)
    (set! (-> this root) s4-0))
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton this *wedge-plat-sg* '())
  (logior! (-> this skel status) (janim-status inited))
  (update-transforms! (-> this root))
  (baseplat-method-21 this)
  (set! (-> this master) (the-as wedge-plat-master (entity-actor-lookup arg0 'alt-actor 0)))
  (set! (-> this offset) (res-lump-float arg0 'rotoffset))
  (set! (-> this distance) (res-lump-float arg0 'distance :default 36864.0))
  (logclear! (-> this mask) (process-mask actor-pause))
  (go wedge-plat-idle)
  (none))

(deftype wedge-plat-outer (wedge-plat) ()
  (:states
   wedge-plat-outer-idle
   wedge-plat-outer-tip))

(defskelgroup *wedge-plat-outer-sg*
  wedge-plat-outer
  wedge-plat-outer-lod0-jg
  wedge-plat-outer-idle-ja
  ((wedge-plat-outer-lod0-mg (meters 999999)))
  :bounds (static-spherem 0 0 0 8))

(defstate wedge-plat-outer-idle (wedge-plat-outer)
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
      (case message
        (('bonk) (baseplat-method-22 self))))
  :trans plat-trans
  :code (behavior ()
      (loop
        (wedge-plat-method-27 self #t)
        ;mod: Wedge platformers tip over when player gets close
        (when (-> (the-as wedge-plat-master (process-by-ename "wedge-plat-master-1")) should-tip?)
          (go wedge-plat-outer-tip)
        )
        (suspend)
      )
    )
  :post plat-post)

(defstate wedge-plat-outer-tip (wedge-plat-outer)
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
      (case message
        (('bonk) (baseplat-method-22 self))
        (('touch) (send-event proc 'no-look-around (seconds 1.5)))))
  :trans plat-trans
  :code (behavior ()
      (ja-no-eval :group! wedge-plat-outer-tip-ja :num! (seek! (ja-aframe 60.0 0)) :frame-num (ja-aframe 0.0 0))
      (until (ja-done? 0)
        (wedge-plat-method-27 self #t)
        (suspend)
        (ja :num! (seek! (ja-aframe 60.0 0) 100.0))) ;mod: Wedge platformers tip over instantly
      (ja-no-eval :group! wedge-plat-outer-tip-ja :num! (seek! (ja-aframe 100.0 0)) :frame-num (ja-aframe 60.0 0))
      (until (ja-done? 0)
        (wedge-plat-method-27 self #t)
        (suspend)
        (ja :num! (seek! (ja-aframe 100.0 0))))
      ;mod: Wedge platformers stay tipped over
      (while (-> (the-as wedge-plat-master (process-by-ename "wedge-plat-master-1")) should-tip?)
        (ja :num-func num-func-identity :frame-num (ja-aframe 100.0 0))
        (wedge-plat-method-27 self #t)
        (suspend))
      (ja-no-eval :group! wedge-plat-outer-tip-ja :num! (seek! (ja-aframe 153.0 0)) :frame-num (ja-aframe 100.0 0))
      (until (ja-done? 0)
        (wedge-plat-method-27 self #t)
        (suspend)
        (ja :num! (seek! (ja-aframe 153.0 0))))
      (go wedge-plat-outer-idle))
  :post plat-post)

(defmethod init-from-entity! ((this wedge-plat-outer) (arg0 entity-actor))
  (logior! (-> this mask) (process-mask platform))
  (let ((s4-0 (new 'process 'collide-shape-moving this (collide-list-enum hit-by-player))))
    (set! (-> s4-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s4-0 reaction) default-collision-reaction)
    (set! (-> s4-0 no-reaction) (the-as (function collide-shape-moving collide-shape-intersect vector vector none) nothing))
    (alloc-riders s4-0 1)
    (let ((s3-0 (new 'process 'collide-shape-prim-mesh s4-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> s3-0 prim-core collide-as) (collide-kind ground-object))
      (set! (-> s3-0 collide-with) (collide-kind target))
      (set! (-> s3-0 prim-core action) (collide-action solid rider-plat-sticky rider-plat))
      (set! (-> s3-0 prim-core offense) (collide-offense indestructible))
      (set! (-> s3-0 transform-index) 3)
      (set-vector! (-> s3-0 local-sphere) 0.0 0.0 0.0 32768.0)
      (set-root-prim! s4-0 s3-0))
    (set! (-> s4-0 nav-radius) (* 0.75 (-> s4-0 root-prim local-sphere w)))
    (backup-collide-with-as s4-0)
    (set! (-> this root) s4-0))
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton this *wedge-plat-sg* '())
  (logior! (-> this skel status) (janim-status inited))
  (update-transforms! (-> this root))
  (baseplat-method-21 this)
  (set! (-> this master) (the-as wedge-plat-master (entity-actor-lookup arg0 'alt-actor 0)))
  (set! (-> this offset) (res-lump-float arg0 'rotoffset))
  (set! (-> this distance) (res-lump-float arg0 'distance :default 69632.0))
  (logclear! (-> this mask) (process-mask actor-pause))
  (go wedge-plat-outer-idle)
  (none))
