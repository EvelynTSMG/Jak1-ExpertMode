;;-*-Lisp-*-
(in-package goal)
(bundles "ROL.DGO")
(require "engine/common-obs/collectables.gc")

(deftype race-ring (process-drawable)
  (
    (rot-y                 float)
    (face-vec              vector :inline)
    (part-track            handle)
    (keep-part-track-alive symbol)
    (timeout               time-frame)
    (alt-actor             entity-actor)
    (alt-task              uint8)
    (cyl                   cylinder-flat :inline)
    (tgt-pos               vector :inline)
  )
  (:states
    race-ring-active
    race-ring-idle
    race-ring-wait
  )
  (:methods
    (rotate-ring (_type_) none)
  )
)


(defpartgroup group-rolling-ring
  :id 457
  :linger-duration (seconds 0)
  :bounds (static-bspherem 0 0 0 8)
  :parts (
    (sp-item 1773 :fade-after (meters 100) :falloff-to (meters 100))
    (sp-item 1774 :fade-after (meters 80))
    (sp-item 1775 :flags (is-3d))
    (sp-item 1776 :flags (is-3d))
  )
)

(defpart 1773
  :init-specs (
    (:texture (starflash effects))
    (:num 2.0 2.0)
    (:scale-x (meters 1) (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 64.0 1 64.0)
    (:g 0.0)
    (:b 64.0 1 64.0)
    (:a 64.0)
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:fade-a -1.4222221)
    (:timer (seconds 0.14))
    (:flags (bit2 bit3))
    (:conerot-x (degrees 0) (degrees 360))
    (:conerot-radius (meters 4.5))
    (:rotate-y (degrees 0))
  )
)

(defpart 1774
  :init-specs (
    (:texture (starflash effects))
    (:num 1.0)
    (:scale-x (meters 1) (meters 4))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 64.0 1 64.0)
    (:g 0.0)
    (:b 64.0 1 64.0)
    (:a 64.0)
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:fade-a -1.4222221)
    (:timer (seconds 0.14))
    (:flags (bit2 bit3))
    (:conerot-x (degrees 0) (degrees 360))
    (:conerot-radius (meters 4.5))
    (:rotate-y (degrees 0))
  )
)

(defpart 1775
  :init-specs (
    (:texture (water-ring effects))
    (:num 1.0)
    (:scale-x (meters 10))
    (:rot-x (degrees 0) (degrees 360))
    (:rot-y (degrees -1) (degrees 2))
    (:rot-z (degrees 90))
    (:scale-y :copy scale-x)
    (:r 128.0 1 127.0)
    (:g 0.0)
    (:b 128.0 1 127.0)
    (:a 96.0 32.0)
    (:fade-a -8.533334)
    (:timer (seconds 0.035))
    (:flags (bit2 bit3))
  )
)

(defpart 1776
  :init-specs (
    (:texture (middot effects))
    (:num 1.0)
    (:scale-x (meters 12))
    (:rot-x (degrees 0) (degrees 360))
    (:rot-y (degrees 0))
    (:rot-z (degrees 90))
    (:scale-y :copy scale-x)
    (:r 128.0 1 127.0)
    (:g 0.0)
    (:b 128.0 1 127.0)
    (:a 32.0 32.0)
    (:timer (seconds 0.017))
    (:flags (bit2 bit3))
  )
)

(defpartgroup group-rolling-ring-spawn
  :id 458
  :duration (seconds 0.017)
  :linger-duration (seconds 0.47)
  :bounds (static-bspherem 0 0 0 8)
  :parts (
    (sp-item 1777 :fade-after (meters 100) :falloff-to (meters 100))
    (sp-item 1778 :flags (is-3d))
    (sp-item 1779 :flags (is-3d))
  )
)

(defpart 1777
  :init-specs (
    (:texture (starflash effects))
    (:num 32.0)
    (:scale-x (meters 1) (meters 3))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 64.0 1 64.0)
    (:g 0.0)
    (:b 64.0 1 64.0)
    (:a 0.0 63 1.0)
    (:vel-y (meters 0.03))
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:timer (seconds 0.5))
    (:flags (bit3))
    (:next-time (seconds 0.067) (seconds 0.065))
    (:next-launcher 1780)
    (:conerot-x (degrees 0) (degrees 360))
    (:conerot-radius (meters 0))
    (:rotate-y (degrees 0))
  )
)

(defpart 1780
  :init-specs (
    (:r 64.0 1 64.0)
    (:g 0.0)
    (:b 64.0 1 64.0)
    (:a 0.0 63 1.0)
    (:next-time (seconds 0.067) (seconds 0.065))
    (:next-launcher 1780)
  )
)

(defpart 1778
  :init-specs (
    (:texture (water-ring effects))
    (:num 1.0)
    (:scale-x (meters 0))
    (:rot-x (degrees 0) (degrees 360))
    (:rot-y (degrees -1) (degrees 2))
    (:rot-z (degrees 90))
    (:scale-y :copy scale-x)
    (:r 128.0 1 127.0)
    (:g 0.0)
    (:b 128.0 1 127.0)
    (:a 96.0 32.0)
    (:scalevel-x (meters 0.06666667))
    (:scalevel-y :copy scalevel-x)
    (:timer (seconds 0.5))
    (:flags (bit2 bit3 left-multiply-quat))
    (:next-time (seconds 0.017))
    (:next-launcher 1781)
  )
)

(defpart 1781
  :init-specs (
    (:r 128.0 1 127.0)
    (:g 0.0)
    (:b 128.0 1 127.0)
    (:a 32.0 32.0)
    (:next-time (seconds 0.017))
    (:next-launcher 1781)
  )
)

(defpart 1779
  :init-specs (
    (:texture (middot effects))
    (:num 1.0)
    (:scale-x (meters 0))
    (:rot-x (degrees 0) (degrees 360))
    (:rot-y (degrees 0))
    (:rot-z (degrees 90))
    (:scale-y :copy scale-x)
    (:r 128.0 1 127.0)
    (:g 0.0)
    (:b 128.0 1 127.0)
    (:a 32.0 32.0)
    (:scalevel-x (meters 0.08))
    (:scalevel-y :copy scalevel-x)
    (:timer (seconds 0.5))
    (:flags (bit2 bit3 left-multiply-quat))
    (:next-time (seconds 0.017))
    (:next-launcher 1782)
  )
)

(defpart 1782
  :init-specs (
    (:r 128.0 1 127.0)
    (:g 0.0)
    (:b 128.0 1 127.0)
    (:a 32.0 32.0)
    (:next-time (seconds 0.017))
    (:next-launcher 1782)
  )
)

(defpartgroup group-rolling-ring-explode
  :id 459
  :duration (seconds 0.017)
  :linger-duration (seconds 0.5)
  :bounds (static-bspherem 0 0 0 8)
  :parts (
    (sp-item 1783 :fade-after (meters 100) :falloff-to (meters 100))
    (sp-item 1784 :flags (is-3d))
  )
)

(defpart 1783
  :init-specs (
    (:texture (starflash effects))
    (:num 64.0)
    (:scale-x (meters 1) (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 64.0 1 64.0)
    (:g 0.0)
    (:b 64.0 1 64.0)
    (:a 32.0 96.0)
    (:vel-y (meters 0.1) (meters 0.033333335))
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:fade-a -0.85333335)
    (:friction 0.9)
    (:timer (seconds 0.5))
    (:flags (bit2 bit3))
    (:conerot-x (degrees 0) (degrees 360))
    (:conerot-radius (meters 4.5))
    (:rotate-y (degrees 0))
  )
)

(defpart 1784
  :init-specs (
    (:texture (water-ring effects))
    (:num 2.0)
    (:scale-x (meters 10))
    (:rot-x (degrees 0) (degrees 360))
    (:rot-y (degrees -1) (degrees 2))
    (:rot-z (degrees 90))
    (:scale-y :copy scale-x)
    (:r 128.0 1 127.0)
    (:g 0.0)
    (:b 128.0 1 127.0)
    (:a 128.0)
    (:scalevel-x (meters 0.06666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.85333335)
    (:timer (seconds 0.5))
    (:flags (bit2 bit3))
  )
)

(defun race-ring-set-particle-rotation-callback ((arg0 part-tracker))
  (let ((f0-0 (-> (the-as (pointer race-ring) (-> arg0 userdata)) 0 rot-y)))
    (set! (-> *part-id-table* 1773 init-specs 15 initial-valuef) f0-0)
    (set! (-> *part-id-table* 1774 init-specs 15 initial-valuef) f0-0)
    (set! (-> *part-id-table* 1775 init-specs  4 initial-valuef) (+ -182.04445 f0-0))
    (set! (-> *part-id-table* 1776 init-specs  4 initial-valuef) f0-0)
    (set! (-> *part-id-table* 1777 init-specs 17 initial-valuef) f0-0)
    (set! (-> *part-id-table* 1778 init-specs  4 initial-valuef) f0-0)
    (set! (-> *part-id-table* 1779 init-specs  4 initial-valuef) f0-0)
    (set! (-> *part-id-table* 1783 init-specs 17 initial-valuef) f0-0)
    (set! (-> *part-id-table* 1784 init-specs  4 initial-valuef) f0-0)
  )

  (none)
)

(defpartgroup group-rolling-ring-blue
  :id 460
  :linger-duration (seconds 0)
  :bounds (static-bspherem 0 0 0 8)
  :parts (
    (sp-item 1785 :fade-after (meters 100) :falloff-to (meters 100))
    (sp-item 1786 :fade-after (meters 80))
    (sp-item 1787 :flags (is-3d))
    (sp-item 1788 :flags (is-3d))
  )
)

(defpart 1785
  :init-specs (
    (:texture (starflash effects))
    (:num 2.0 2.0)
    (:scale-x (meters 1) (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 0.0)
    (:g 64.0 1 64.0)
    (:b 64.0 1 64.0)
    (:a 64.0)
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:fade-a -1.4222221)
    (:timer (seconds 0.14))
    (:flags (bit2 bit3))
    (:conerot-x (degrees 0) (degrees 360))
    (:conerot-radius (meters 4.5))
    (:rotate-y (degrees 0))
  )
)

(defpart 1786
  :init-specs (
    (:texture (starflash effects))
    (:num 1.0)
    (:scale-x (meters 1) (meters 4))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 0.0)
    (:g 64.0 1 64.0)
    (:b 64.0 1 64.0)
    (:a 64.0)
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:fade-a -1.4222221)
    (:timer (seconds 0.14))
    (:flags (bit2 bit3))
    (:conerot-x (degrees 0) (degrees 360))
    (:conerot-radius (meters 4.5))
    (:rotate-y (degrees 0))
  )
)

(defpart 1787
  :init-specs (
    (:texture (water-ring effects))
    (:num 1.0)
    (:scale-x (meters 10))
    (:rot-x (degrees 0) (degrees 360))
    (:rot-y (degrees -1) (degrees 2))
    (:rot-z (degrees 90))
    (:scale-y :copy scale-x)
    (:r 0.0)
    (:g 128.0 1 127.0)
    (:b 128.0 1 127.0)
    (:a 96.0 32.0)
    (:fade-a -8.533334)
    (:timer (seconds 0.035))
    (:flags (bit2 bit3))
  )
)

(defpart 1788
  :init-specs (
    (:texture (middot effects))
    (:num 1.0)
    (:scale-x (meters 12))
    (:rot-x (degrees 0) (degrees 360))
    (:rot-y (degrees 0))
    (:rot-z (degrees 90))
    (:scale-y :copy scale-x)
    (:r 0.0)
    (:g 128.0 1 127.0)
    (:b 128.0 1 127.0)
    (:a 32.0 32.0)
    (:timer (seconds 0.017))
    (:flags (bit2 bit3))
  )
)

(defpartgroup group-rolling-ring-spawn-blue
  :id 461
  :duration (seconds 0.017)
  :linger-duration (seconds 0.47)
  :bounds (static-bspherem 0 0 0 8)
  :parts (
    (sp-item 1789 :fade-after (meters 100) :falloff-to (meters 100))
    (sp-item 1790 :flags (is-3d))
    (sp-item 1791 :flags (is-3d))
  )
)

(defpart 1789
  :init-specs (
    (:texture (starflash effects))
    (:num 32.0)
    (:scale-x (meters 1) (meters 3))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 0.0)
    (:g 64.0 1 64.0)
    (:b 64.0 1 64.0)
    (:a 0.0 63 1.0)
    (:vel-y (meters 0.03))
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:timer (seconds 0.5))
    (:flags (bit3))
    (:next-time (seconds 0.067) (seconds 0.065))
    (:next-launcher 1792)
    (:conerot-x (degrees 0) (degrees 360))
    (:conerot-radius (meters 0))
    (:rotate-y (degrees 0))
  )
)

(defpart 1792
  :init-specs (
    (:r 0.0)
    (:g 64.0 1 64.0)
    (:b 64.0 1 64.0)
    (:a 0.0 63 1.0)
    (:next-time (seconds 0.067) (seconds 0.065))
    (:next-launcher 1792)
  )
)

(defpart 1790
  :init-specs (
    (:texture (water-ring effects))
    (:num 1.0)
    (:scale-x (meters 0))
    (:rot-x (degrees 0) (degrees 360))
    (:rot-y (degrees -1) (degrees 2))
    (:rot-z (degrees 90))
    (:scale-y :copy scale-x)
    (:r 0.0)
    (:g 128.0 1 127.0)
    (:b 128.0 1 127.0)
    (:a 96.0 32.0)
    (:scalevel-x (meters 0.06666667))
    (:scalevel-y :copy scalevel-x)
    (:timer (seconds 0.5))
    (:flags (bit2 bit3 left-multiply-quat))
    (:next-time (seconds 0.017))
    (:next-launcher 1793)
  )
)

(defpart 1793
  :init-specs (
    (:r 0.0)
    (:g 128.0 1 127.0)
    (:b 128.0 1 127.0)
    (:a 32.0 32.0)
    (:next-time (seconds 0.017))
    (:next-launcher 1793)
  )
)

(defpart 1791
  :init-specs (
    (:texture (middot effects))
    (:num 1.0)
    (:scale-x (meters 0))
    (:rot-x (degrees 0) (degrees 360))
    (:rot-y (degrees 0))
    (:rot-z (degrees 90))
    (:scale-y :copy scale-x)
    (:r 0.0)
    (:g 128.0 1 127.0)
    (:b 128.0 1 127.0)
    (:a 32.0 32.0)
    (:scalevel-x (meters 0.08))
    (:scalevel-y :copy scalevel-x)
    (:timer (seconds 0.5))
    (:flags (bit2 bit3 left-multiply-quat))
    (:next-time (seconds 0.017))
    (:next-launcher 1794)
  )
)

(defpart 1794
  :init-specs (
    (:r 0.0)
    (:g 128.0 1 127.0)
    (:b 128.0 1 127.0)
    (:a 32.0 32.0)
    (:next-time (seconds 0.017))
    (:next-launcher 1794)
  )
)

(defpartgroup group-rolling-ring-explode-blue
  :id 462
  :duration (seconds 0.017)
  :linger-duration (seconds 0.5)
  :bounds (static-bspherem 0 0 0 8)
  :parts (
    (sp-item 1795 :fade-after (meters 100) :falloff-to (meters 100))
    (sp-item 1796 :flags (is-3d))
  )
)

(defpart 1795
  :init-specs (
    (:texture (starflash effects))
    (:num 64.0)
    (:scale-x (meters 1) (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 0.0)
    (:g 64.0 1 64.0)
    (:b 64.0 1 64.0)
    (:a 32.0 96.0)
    (:vel-y (meters 0.1) (meters 0.033333335))
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:fade-a -0.85333335)
    (:friction 0.9)
    (:timer (seconds 0.5))
    (:flags (bit2 bit3))
    (:conerot-x (degrees 0) (degrees 360))
    (:conerot-radius (meters 4.5))
    (:rotate-y (degrees 0))
  )
)

(defpart 1796
  :init-specs (
    (:texture (water-ring effects))
    (:num 2.0)
    (:scale-x (meters 10))
    (:rot-x (degrees 0) (degrees 360))
    (:rot-y (degrees -1) (degrees 2))
    (:rot-z (degrees 90))
    (:scale-y :copy scale-x)
    (:r 0.0)
    (:g 128.0 1 127.0)
    (:b 128.0 1 127.0)
    (:a 128.0)
    (:scalevel-x (meters 0.06666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.85333335)
    (:timer (seconds 0.5))
    (:flags (bit2 bit3))
  )
)

(defun race-ring-blue-set-particle-rotation-callback ((arg0 part-tracker))
  (let ((f0-0 (-> (the-as (pointer race-ring) (-> arg0 userdata)) 0 rot-y)))
    (set! (-> *part-id-table* 1785 init-specs 15 initial-valuef) f0-0)
    (set! (-> *part-id-table* 1786 init-specs 15 initial-valuef) f0-0)
    (set! (-> *part-id-table* 1787 init-specs 4 initial-valuef) (+ -182.04445 f0-0))
    (set! (-> *part-id-table* 1788 init-specs 4 initial-valuef) f0-0)
    (set! (-> *part-id-table* 1789 init-specs 17 initial-valuef) f0-0)
    (set! (-> *part-id-table* 1790 init-specs 4 initial-valuef) f0-0)
    (set! (-> *part-id-table* 1791 init-specs 4 initial-valuef) f0-0)
    (set! (-> *part-id-table* 1795 init-specs 17 initial-valuef) f0-0)
    (set! (-> *part-id-table* 1796 init-specs 4 initial-valuef) f0-0))

  (none)
)

(defskelgroup *race-ring-sg*
  race-ring
  race-ring-lod0-jg
  race-ring-race-ring-idle-ja
  ((race-ring-lod0-mg (meters 999999)))
  :bounds (static-spherem 0 0 0 4)
)

(defun first-ring? ((arg0 race-ring))
  (not (-> arg0 alt-actor))
)

(defun last-ring? ((arg0 race-ring))
  (not (-> arg0 link next))
)

(defstate race-ring-active (race-ring)
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
      (local-vars (v0-0 symbol))
      (case message
        (('notify)
          (when (and
                (= (-> block param 0) 'die)
                (= proc (-> self part-track process 0))
              )
            (cond
              ; Blue Rings
              ((= (-> self entity extra perm task) (game-task rolling-ring-chase-2))
                
                (set! (-> self part-track)
                  (ppointer->handle
                    (process-spawn part-tracker
                      :init part-tracker-init
                      (-> *part-group-id-table* 460)
                      -1
                      race-ring-blue-set-particle-rotation-callback
                      (-> self ppointer)
                      #f
                      (-> self root trans)
                      :to self
                    )
                  )
                )
                (set! v0-0 #t)
                (set! (-> self keep-part-track-alive) v0-0)
              )

              ; Purple Rings
              (else
                (set! (-> self part-track)
                  (ppointer->handle
                    (process-spawn part-tracker
                      :init part-tracker-init
                      (-> *part-group-id-table* 457)
                      -1
                      race-ring-set-particle-rotation-callback
                      (-> self ppointer)
                      #f
                      (-> self root trans)
                      :to self
                    )
                  )
                )
                (set! v0-0 #t)
                (set! (-> self keep-part-track-alive) v0-0)
              )
            )

            v0-0
          )
        )
      )
    )

  :enter (behavior ()
      (cond
        ((first-ring? self)
         (logior! (-> self mask) (process-mask actor-pause))
         (process-entity-status! self (entity-perm-status bit-3) #f)
        )
        (else
          (logclear! (-> self mask) (process-mask actor-pause))
          (process-entity-status! self (entity-perm-status bit-3) #t)
        )
      )
      (set! (-> self keep-part-track-alive) #f)

      (if (= (-> self entity extra perm task) (game-task rolling-ring-chase-2))
        ; Blue Rings
        (set! (-> self part-track)
          (ppointer->handle
            (process-spawn part-tracker
              :init part-tracker-init
              (-> *part-group-id-table* 461)
              -1
              race-ring-blue-set-particle-rotation-callback
              (-> self ppointer)
              #f
              (-> self root trans)
              :to self
            )
          )
        )

        ; Purple Rings
        (set! (-> self part-track)
          (ppointer->handle
            (process-spawn part-tracker
              :init part-tracker-init
              (-> *part-group-id-table* 458)
              -1
              race-ring-set-particle-rotation-callback
              (-> self ppointer)
              #f
              (-> self root trans)
              :to self
            )
          )
        )
      )

      (set! (-> self tgt-pos quad) (-> (target-pos 26) quad))
      (+! (-> self tgt-pos x) 1.0)
      (set! (-> self state-time) (igt-gameplay))
    )

  :exit (behavior ()
      (sound-play "close-racering")

      (let ((part-track (handle->process (-> self part-track)))) 
        (if part-track 
          (deactivate part-track)
        )
      )

      (if (= (-> self entity extra perm task) (game-task rolling-ring-chase-2))
        ; Blue Rings
        (set! (-> self part-track)
          (ppointer->handle
            (process-spawn part-tracker
              :init part-tracker-init
              (-> *part-group-id-table* 462)
              -1
              race-ring-blue-set-particle-rotation-callback
              (-> self ppointer)
              #f
              (-> self root trans)
              :to self
            )
          )
        )

        ; Purple Rings
        (set! (-> self part-track)
          (ppointer->handle
            (process-spawn part-tracker
              :init part-tracker-init
              (-> *part-group-id-table* 459)
              -1
              race-ring-set-particle-rotation-callback
              (-> self ppointer)
              #f
              (-> self root trans)
              :to self
            )
          )
        )
      )

      (cond
        ((first-ring? self)
          (logclear! (-> self mask) (process-mask actor-pause))
          (process-entity-status! self (entity-perm-status bit-3) #t)
        )
        (else
          (logior! (-> self mask) (process-mask actor-pause))
          (process-entity-status! self (entity-perm-status bit-3) #f)
        )
      )
    )

  :trans (behavior ()
      (if (nonzero? (-> self sound)) (update! (-> self sound)))

      (cond
        ((handle->process (-> self part-track))
          (if (-> self keep-part-track-alive)
            (set-time! (-> (the-as part-tracker (-> self part-track process 0)) start-time))
          )
        )

        ; Blue Rings
        ((= (-> self entity extra perm task) (game-task rolling-ring-chase-2))
         (set! (-> self part-track)
            (ppointer->handle
              (process-spawn part-tracker
                :init part-tracker-init
                (-> *part-group-id-table* 460)
                -1
                race-ring-blue-set-particle-rotation-callback
                (-> self ppointer)
                #f
                (-> self root trans)
                :to self
              )
            )
          )
          (set! (-> self keep-part-track-alive) #t)
        )

        ; Purple Rings
        (else
          (set! (-> self part-track)
            (ppointer->handle
              (process-spawn part-tracker
                :init part-tracker-init
                (-> *part-group-id-table* 457)
                -1
                race-ring-set-particle-rotation-callback
                (-> self ppointer)
                #f
                (-> self root trans)
                :to self
              )
            )
          )
          (set! (-> self keep-part-track-alive) #t)
        )
      )

      (cond
        ((not (last-ring? self)))

        ; Blue Rings
        ((= (-> self entity extra perm task) (game-task rolling-ring-chase-2))
          (spool-push *art-control* "race-ring-second-anim" 0 self -99.0)
        )

        ; Purple Rings
        (else
          (spool-push *art-control* "race-ring-anim" 0 self -99.0)
        )
      )
    )

  :code (behavior ()
      (loop
        (suspend)

        (cond
          ((first-ring? self))
          ;; ((>= (- (igt-gameplay) (-> self state-time)) (-> self timeout))
          ;;   (level-hint-spawn (text-id rolling-ring-chase-fail) "sksp0121" (the-as entity #f) *entity-pool* (game-task none))
          ;;   (ambient-hint-spawn "st-lose" (the-as vector #f) *entity-pool* 'stinger)

          ;;   (let (
          ;;         (msg (new 'stack-no-clear 'event-message-block))
          ;;         (alt (-> self alt-actor))
          ;;       )
          ;;     (set! (-> msg from) self)
          ;;     (set! (-> msg num-params) 0)
          ;;     (set! (-> msg message) 'activate)
          ;;     (send-event-function (if alt (-> alt extra process)) msg)
          ;;   )

          ;;   (go race-ring-idle)
          ;; )
        )

        (when *target*
          ; (target-pos 26) is the position of Jak's hips
          (let* (
                (tgt-pos-old (vector-copy! (new 'stack-no-clear 'vector) (-> self tgt-pos)))
                (tgt-pos-diff (begin
                    (vector-copy! (-> self tgt-pos) (target-pos 26)) ; Update with new position
                    (vector-! (new 'stack-no-clear 'vector) tgt-pos-old (-> self tgt-pos))
                  )
                )
              )
            ; Did we collide with the ring? (If we intersected the cylinder)
            (when (>= (ray-flat-cyl-intersect (-> self cyl) (-> self tgt-pos) tgt-pos-diff) 0.0)
              ; Purple Rings
              (level-hint-spawn (text-id rolling-ring-chase-1-hint) "sksp0119" (the-as entity #f) *entity-pool* (game-task none))

              ; Blue Rings
              (if (= (-> self entity extra perm task) (game-task rolling-ring-chase-2))
                (level-hint-spawn (text-id rolling-ring-chase-2-hint) "sksp0120" (the-as entity #f) *entity-pool* (game-task none))
              )

              (cond
                ((first-ring? self) ; We just started
                  (close-specific-task! (-> self entity extra perm task) (task-status need-hint))
                  (entity-birth-no-kill (-> self link next))
                  (let (
                        (msg (new 'stack-no-clear 'event-message-block))
                        (next (-> self link next))
                      )
                    (set! (-> msg from) self)
                    (set! (-> msg num-params) 0)
                    (set! (-> msg message) 'activate)
                    (send-event-function (if next (-> next extra process)) msg)
                  )
                )

                ((last-ring? self) ; We're done!
                  (let (
                        (gp-2 (ppointer->handle (process-spawn othercam self 4 #f #t :to self)))
                        (s5-2
                          (ppointer->handle
                            (process-spawn fuel-cell
                              :init fuel-cell-init-as-clone
                              (process->handle self)
                              (-> self entity extra perm task)
                              :to self
                            )
                          )
                        )
                      )
                    (if *target*
                      (logior! (-> *target* mask) (process-mask sleep))
                    )
                    (close-specific-task! (-> self entity extra perm task) (task-status need-reminder))

                    (logclear! (-> self draw status) (draw-status hidden))
                    (logior! (-> self draw status) (draw-status skip-bones))
                    (if (= (-> self entity extra perm task) (game-task rolling-ring-chase-2))
                      ; Blue Rings
                      (ja-play-spooled-anim
                        (new 'static 'spool-anim :name "race-ring-second-anim" :index 4 :parts 2 :command-list '())
                        (the-as art-joint-anim #f)
                        (the-as art-joint-anim #f)
                        (the-as (function process-drawable symbol) false-func)
                      )

                      ; Purple Rings
                      (ja-play-spooled-anim
                        (new 'static 'spool-anim :name "race-ring-anim" :index 3 :parts 2 :command-list '())
                        (the-as art-joint-anim #f)
                        (the-as art-joint-anim #f)
                        (the-as (function process-drawable symbol) false-func)
                      )
                    )
                    (logclear! (-> self draw status) (draw-status skip-bones))
                    (logior! (-> self draw status) (draw-status hidden))

                    (cond
                      ((handle->process (the-as int gp-2))
                        (deactivate (-> gp-2 process 0))
                      )
                      (else)
                    )

                    (if *target*
                      (logclear! (-> *target* mask) (process-mask sleep))
                    )

                    (let ((a0-54 (handle->process s5-2)))
                      (if a0-54 (send-event a0-54 'stop-cloning))
                    )
                  )
                )

                (else ; We continue...
                 (entity-birth-no-kill (-> self link next))
                 (let (
                        (msg (new 'stack-no-clear 'event-message-block))
                        (next (-> self link next))
                      )
                    (set! (-> msg from) self)
                    (set! (-> msg num-params) 0)
                    (set! (-> msg message) 'activate)
                    (send-event-function (if next (-> next extra process)) msg)
                  )
                )
              )

              (go race-ring-idle)
            )
          )
        )
      )
    )

  :post ja-post
)

(defstate race-ring-wait (race-ring)
  :code (behavior ()
      (if (nonzero? (-> self sound))
        (stop! (-> self sound))
      )

      (loop
        (suspend)

        (when (= (get-task-status (the-as game-task (-> self alt-task))) (task-status complete))
          (close-specific-task! (-> self entity extra perm task) (task-status need-hint))
          (logclear! (-> self mask) (process-mask actor-pause))
          (go race-ring-active)
        )
      )
    )
)

(defstate race-ring-idle (race-ring)
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
      (case message
        (('activate)
          (logclear! (-> self mask) (process-mask actor-pause))
          (go race-ring-active)
        )
      )
    )

  :code (behavior ()
      (if (nonzero? (-> self sound))
        (stop! (-> self sound))
      )

      (loop
        (suspend)
      )
    )
)

(defmethod init-from-entity! ((this race-ring) (e entity-actor))
  (if (not (entity-actor-lookup e 'next-actor 0))
    (stack-size-set! (-> this main-thread) 512)
  )

  (set! (-> this root) (new 'process 'trsqv))
  (process-drawable-from-entity! this e)
  (initialize-skeleton this *race-ring-sg* '())

  (set! (-> this root pause-adjust-distance) (meters 30.0))
  (set! (-> this link) (new 'process 'actor-link-info this))
  (set! (-> this part-track) (the-as handle #f))
  (set! (-> this alt-actor) (entity-actor-lookup e 'alt-actor 0))
  (logior! (-> this draw status) (draw-status hidden))

  (set! (-> this sound) (new 'process 'ambient-sound (static-sound-spec "loop-racering" :fo-max 40) (-> this root trans)))

  (let ((timeout (res-lump-float e 'timeout)))
    (set! (-> this timeout) (the-as time-frame (* (seconds 1.0) timeout)))
  )

  (rotate-ring this)

  (cond
    ((and ; Should we spawn the rings?
          (first-ring? this)
          (!= (get-task-status (-> this entity extra perm task)) (task-status complete))
          (!= (get-task-status (-> this entity extra perm task)) (task-status need-resolution))
        )
      (set! (-> this alt-task) (res-lump-value (-> this entity) 'alt-task uint))
      (if (or
            (= (-> this alt-task) 0)
            (= (get-task-status (the-as game-task (-> this alt-task))) (task-status complete))
          )
        (go race-ring-active)
        (go race-ring-wait)
      )
    )

    ((and ; Should we spawn the cell?
          (last-ring? this)
          (= (get-task-status (-> this entity extra perm task)) (task-status need-resolution))
        )
      (let ((s5-2 (new 'stack-no-clear 'vector)))
        (logclear! (-> this draw status) (draw-status hidden))
        (ja-post)
        (vector<-cspace! s5-2 (-> this node-list data 5))
        (logior! (-> this draw status) (draw-status hidden))
        (birth-pickup-at-point s5-2
          (pickup-type fuel-cell)
          (the float (-> this entity extra perm task))
          #f
          this
          (the-as fact-info #f)
        )
      )
    )
    ((and
          (last-ring? this)
          (!= (get-task-status (-> this entity extra perm task)) (task-status complete))
        )
      ; Explicitly don't do anything? Why is this case here?
    )
  )

  (set! (-> this event-hook) (-> race-ring-idle event))
  (go race-ring-idle)

  (none)
)

(defmethod rotate-ring ((self race-ring))
  (if (not (res-lump-data (-> self entity) 'auto-rot symbol))
    (begin ; Automatic rotation
      (let ((prev-to-next (new 'stack-no-clear 'vector)))
        ; face-vec = self->next if possible, otherwise prev->self
        (if (-> self link next)
          (vector-! (-> self face-vec) (-> self link next extra trans) (-> self root trans))
          (vector-! (-> self face-vec) (-> self root trans) (-> self link prev extra trans))
        )

        ;mod: Allow `free-rot` in res-lump to not limit rotation to the y-axis
        (if (not (res-lump-data (-> self entity) 'free-rot symbol))
          (vector-flatten! (-> self face-vec) (-> self face-vec) *y-vector*)
        )
        (vector-normalize! (-> self face-vec) 1.0)

        ; Adjust rotation
        (cond
          ; If we're in the middle, we normalize our rotation to between previous and next rings
          ((and
                (-> self link next)
                (-> self link prev)
              )
            (vector-! prev-to-next (-> self link prev extra trans) (-> self root trans)) ; prev-to-next = prev->self

            ;mod: Allow `free-rot` in res-lump to not limit rotation to the y-axis
            (if (not (res-lump-data (-> self entity) 'free-rot symbol))
              (vector-flatten! prev-to-next prev-to-next *y-vector*)
            )
            (vector-normalize! prev-to-next 1.0)

            (vector+! prev-to-next prev-to-next (-> self face-vec)) ; prev-to-next = prev->next
            (vector-normalize! prev-to-next 1.0)

            ; Gets the angle between prev->next and the +Z axis
            (set! (-> self rot-y) (acos (vector-dot prev-to-next *z-vector*)))

            ; If prev->next is facing away from the +X axis, flip the rotation
            (if (< (vector-dot prev-to-next *x-vector*) 0.0)
              (set! (-> self rot-y) (- (-> self rot-y)))
            )
          )

          ; Otherwise we just use face-vec
          (else
            ; Gets the angle between face-vec and the +Z axis
            (set! (-> self rot-y) (acos (vector-dot (-> self face-vec) *z-vector*)))

            ; If face-vec is facing away from the +X axis, flip the rotation
            (if (< (vector-dot (-> self face-vec) *x-vector*) 0.0)
              (set! (-> self rot-y) (- (-> self rot-y)))
            )

            ; Add 90.0 degrees (???) (it'd probably be facing sideways otherwise?)
            (+! (-> self rot-y) (degrees 90.0))
          )
        )
      )

      ; Add the supplied rotation offset
      (+! (-> self rot-y) (res-lump-float (-> self entity) 'rotoffset))
    )

    (begin ; Manual rotation
      (set! (-> self rot-y) (quaternion-y-angle (-> self root quat)))
    )
  )

  ; Set up the cylinder
  (set-vector! (-> self cyl axis) (cos (-> self rot-y)) 0.0 (- (sin (-> self rot-y))) 1.0)
  (vector+float*! (-> self cyl origin) (-> self root trans) (-> self cyl axis) (meters -0.5))
  (set! (-> self cyl radius) (meters 6.0))
  (set! (-> self cyl length) (meters 1.0))

  (none)
)
